
ReceiveInterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000038a  0000041e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800202  00800202  00000420  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002b8  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000141  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000271  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020c  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000127  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000f1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	72 c0       	rjmp	.+228    	; 0x14a <__vector_25>
  66:	00 00       	nop
  68:	0d c1       	rjmp	.+538    	; 0x284 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e8       	ldi	r30, 0x8A	; 138
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 32       	cpi	r26, 0x27	; 39
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	9d d0       	rcall	.+314    	; 0x25a <main>
 120:	32 c1       	rjmp	.+612    	; 0x386 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <serial_gets>:
	return UDR0;
}

void serial_write(char c){
	loop_until_bit_is_set(UCSR0A, UDRE0);
	UDR0 = c;
 124:	90 93 06 02 	sts	0x0206, r25
 128:	80 93 05 02 	sts	0x0205, r24
 12c:	10 92 04 02 	sts	0x0204, r1
 130:	e1 ec       	ldi	r30, 0xC1	; 193
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	20 81       	ld	r18, Z
 136:	20 68       	ori	r18, 0x80	; 128
 138:	20 83       	st	Z, r18
 13a:	20 81       	ld	r18, Z
 13c:	22 23       	and	r18, r18
 13e:	ec f3       	brlt	.-6      	; 0x13a <serial_gets+0x16>
 140:	90 93 06 02 	sts	0x0206, r25
 144:	80 93 05 02 	sts	0x0205, r24
 148:	08 95       	ret

0000014a <__vector_25>:
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	0b b6       	in	r0, 0x3b	; 59
 156:	0f 92       	push	r0
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
 160:	80 91 04 02 	lds	r24, 0x0204
 164:	8f 31       	cpi	r24, 0x1F	; 31
 166:	58 f0       	brcs	.+22     	; 0x17e <__vector_25+0x34>
 168:	e0 91 05 02 	lds	r30, 0x0205
 16c:	f0 91 06 02 	lds	r31, 0x0206
 170:	10 82       	st	Z, r1
 172:	e1 ec       	ldi	r30, 0xC1	; 193
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8f 77       	andi	r24, 0x7F	; 127
 17a:	80 83       	st	Z, r24
 17c:	21 c0       	rjmp	.+66     	; 0x1c0 <__vector_25+0x76>
 17e:	e0 91 05 02 	lds	r30, 0x0205
 182:	f0 91 06 02 	lds	r31, 0x0206
 186:	80 91 c6 00 	lds	r24, 0x00C6
 18a:	80 83       	st	Z, r24
 18c:	80 81       	ld	r24, Z
 18e:	8a 30       	cpi	r24, 0x0A	; 10
 190:	69 f4       	brne	.+26     	; 0x1ac <__vector_25+0x62>
 192:	cf 01       	movw	r24, r30
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	90 93 06 02 	sts	0x0206, r25
 19a:	80 93 05 02 	sts	0x0205, r24
 19e:	11 82       	std	Z+1, r1	; 0x01
 1a0:	e1 ec       	ldi	r30, 0xC1	; 193
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	8f 77       	andi	r24, 0x7F	; 127
 1a8:	80 83       	st	Z, r24
 1aa:	0a c0       	rjmp	.+20     	; 0x1c0 <__vector_25+0x76>
 1ac:	31 96       	adiw	r30, 0x01	; 1
 1ae:	f0 93 06 02 	sts	0x0206, r31
 1b2:	e0 93 05 02 	sts	0x0205, r30
 1b6:	80 91 04 02 	lds	r24, 0x0204
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	80 93 04 02 	sts	0x0204, r24
 1c0:	80 91 04 02 	lds	r24, 0x0204
 1c4:	8f 31       	cpi	r24, 0x1F	; 31
 1c6:	50 f0       	brcs	.+20     	; 0x1dc <__vector_25+0x92>
 1c8:	e0 91 05 02 	lds	r30, 0x0205
 1cc:	f0 91 06 02 	lds	r31, 0x0206
 1d0:	10 82       	st	Z, r1
 1d2:	e1 ec       	ldi	r30, 0xC1	; 193
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	8f 77       	andi	r24, 0x7F	; 127
 1da:	80 83       	st	Z, r24
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	0f 90       	pop	r0
 1e6:	0b be       	out	0x3b, r0	; 59
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <serial_open>:
 1f2:	dc 01       	movw	r26, r24
 1f4:	cb 01       	movw	r24, r22
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	aa 1f       	adc	r26, r26
 1fc:	bb 1f       	adc	r27, r27
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	aa 1f       	adc	r26, r26
 204:	bb 1f       	adc	r27, r27
 206:	9c 01       	movw	r18, r24
 208:	ad 01       	movw	r20, r26
 20a:	22 0f       	add	r18, r18
 20c:	33 1f       	adc	r19, r19
 20e:	44 1f       	adc	r20, r20
 210:	55 1f       	adc	r21, r21
 212:	22 0f       	add	r18, r18
 214:	33 1f       	adc	r19, r19
 216:	44 1f       	adc	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	74 e2       	ldi	r23, 0x24	; 36
 21e:	84 ef       	ldi	r24, 0xF4	; 244
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	73 d0       	rcall	.+230    	; 0x30a <__divmodsi4>
 224:	21 50       	subi	r18, 0x01	; 1
 226:	31 09       	sbc	r19, r1
 228:	30 93 c5 00 	sts	0x00C5, r19
 22c:	20 93 c4 00 	sts	0x00C4, r18
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	80 93 c2 00 	sts	0x00C2, r24
 236:	88 e1       	ldi	r24, 0x18	; 24
 238:	80 93 c1 00 	sts	0x00C1, r24
 23c:	08 95       	ret

0000023e <serial_print>:
}

void serial_print(char *str){
	if(transmit_ISR){
 23e:	20 91 00 02 	lds	r18, 0x0200
 242:	22 23       	and	r18, r18
 244:	49 f0       	breq	.+18     	; 0x258 <serial_print+0x1a>
		pData = str;
 246:	90 93 03 02 	sts	0x0203, r25
 24a:	80 93 02 02 	sts	0x0202, r24
		UCSR0B |= (1<<UDRIE0);
 24e:	e1 ec       	ldi	r30, 0xC1	; 193
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	80 62       	ori	r24, 0x20	; 32
 256:	80 83       	st	Z, r24
 258:	08 95       	ret

0000025a <main>:
void serial_write(char c);
void serial_print(char *str);

int main(void)
{
	sei();
 25a:	78 94       	sei
	serial_open(19200, 0);
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	50 e0       	ldi	r21, 0x00	; 0
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	7b e4       	ldi	r23, 0x4B	; 75
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	c4 df       	rcall	.-120    	; 0x1f2 <serial_open>
    while(1)
    {
		serial_gets(receive, 0);
		serial_print(receive);
		loop_until_bit_is_set(UCSR0B, UDRIE0);
 26a:	c1 ec       	ldi	r28, 0xC1	; 193
 26c:	d0 e0       	ldi	r29, 0x00	; 0
{
	sei();
	serial_open(19200, 0);
    while(1)
    {
		serial_gets(receive, 0);
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	92 e0       	ldi	r25, 0x02	; 2
 274:	57 df       	rcall	.-338    	; 0x124 <serial_gets>
		serial_print(receive);
 276:	87 e0       	ldi	r24, 0x07	; 7
 278:	92 e0       	ldi	r25, 0x02	; 2
 27a:	e1 df       	rcall	.-62     	; 0x23e <serial_print>
		loop_until_bit_is_set(UCSR0B, UDRIE0);
 27c:	88 81       	ld	r24, Y
 27e:	85 ff       	sbrs	r24, 5
 280:	fd cf       	rjmp	.-6      	; 0x27c <main+0x22>
 282:	f5 cf       	rjmp	.-22     	; 0x26e <main+0x14>

00000284 <__vector_26>:
		pData = str;
		UCSR0B |= (1<<UDRIE0);
	}
}

ISR (USART0_UDRE_vect){
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	0b b6       	in	r0, 0x3b	; 59
 290:	0f 92       	push	r0
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
	if(*pData == 0){
 29a:	e0 91 02 02 	lds	r30, 0x0202
 29e:	f0 91 03 02 	lds	r31, 0x0203
 2a2:	80 81       	ld	r24, Z
 2a4:	81 11       	cpse	r24, r1
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <__vector_26+0x36>
		transmit_ISR = 1;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 00 02 	sts	0x0200, r24
		UCSR0B &= ~(1<<UDRIE0);
 2ae:	e1 ec       	ldi	r30, 0xC1	; 193
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	8f 7d       	andi	r24, 0xDF	; 223
 2b6:	80 83       	st	Z, r24
 2b8:	0e c0       	rjmp	.+28     	; 0x2d6 <__vector_26+0x52>
	}
	else{
		transmit_ISR=0;
 2ba:	10 92 00 02 	sts	0x0200, r1
		UDR0=*pData;
 2be:	80 81       	ld	r24, Z
 2c0:	80 93 c6 00 	sts	0x00C6, r24
		*pData++;
 2c4:	80 91 02 02 	lds	r24, 0x0202
 2c8:	90 91 03 02 	lds	r25, 0x0203
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	90 93 03 02 	sts	0x0203, r25
 2d2:	80 93 02 02 	sts	0x0202, r24
	}
	if(*pData==0){
 2d6:	e0 91 02 02 	lds	r30, 0x0202
 2da:	f0 91 03 02 	lds	r31, 0x0203
 2de:	80 81       	ld	r24, Z
 2e0:	81 11       	cpse	r24, r1
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <__vector_26+0x70>
		transmit_ISR = 1;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 00 02 	sts	0x0200, r24
		UCSR0B &= ~(1<<UDRIE0);
 2ea:	e1 ec       	ldi	r30, 0xC1	; 193
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	8f 7d       	andi	r24, 0xDF	; 223
 2f2:	80 83       	st	Z, r24
	}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	0f 90       	pop	r0
 2fe:	0b be       	out	0x3b, r0	; 59
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__divmodsi4>:
 30a:	05 2e       	mov	r0, r21
 30c:	97 fb       	bst	r25, 7
 30e:	16 f4       	brtc	.+4      	; 0x314 <__divmodsi4+0xa>
 310:	00 94       	com	r0
 312:	0f d0       	rcall	.+30     	; 0x332 <__negsi2>
 314:	57 fd       	sbrc	r21, 7
 316:	05 d0       	rcall	.+10     	; 0x322 <__divmodsi4_neg2>
 318:	14 d0       	rcall	.+40     	; 0x342 <__udivmodsi4>
 31a:	07 fc       	sbrc	r0, 7
 31c:	02 d0       	rcall	.+4      	; 0x322 <__divmodsi4_neg2>
 31e:	46 f4       	brtc	.+16     	; 0x330 <__divmodsi4_exit>
 320:	08 c0       	rjmp	.+16     	; 0x332 <__negsi2>

00000322 <__divmodsi4_neg2>:
 322:	50 95       	com	r21
 324:	40 95       	com	r20
 326:	30 95       	com	r19
 328:	21 95       	neg	r18
 32a:	3f 4f       	sbci	r19, 0xFF	; 255
 32c:	4f 4f       	sbci	r20, 0xFF	; 255
 32e:	5f 4f       	sbci	r21, 0xFF	; 255

00000330 <__divmodsi4_exit>:
 330:	08 95       	ret

00000332 <__negsi2>:
 332:	90 95       	com	r25
 334:	80 95       	com	r24
 336:	70 95       	com	r23
 338:	61 95       	neg	r22
 33a:	7f 4f       	sbci	r23, 0xFF	; 255
 33c:	8f 4f       	sbci	r24, 0xFF	; 255
 33e:	9f 4f       	sbci	r25, 0xFF	; 255
 340:	08 95       	ret

00000342 <__udivmodsi4>:
 342:	a1 e2       	ldi	r26, 0x21	; 33
 344:	1a 2e       	mov	r1, r26
 346:	aa 1b       	sub	r26, r26
 348:	bb 1b       	sub	r27, r27
 34a:	fd 01       	movw	r30, r26
 34c:	0d c0       	rjmp	.+26     	; 0x368 <__udivmodsi4_ep>

0000034e <__udivmodsi4_loop>:
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	ee 1f       	adc	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	a2 17       	cp	r26, r18
 358:	b3 07       	cpc	r27, r19
 35a:	e4 07       	cpc	r30, r20
 35c:	f5 07       	cpc	r31, r21
 35e:	20 f0       	brcs	.+8      	; 0x368 <__udivmodsi4_ep>
 360:	a2 1b       	sub	r26, r18
 362:	b3 0b       	sbc	r27, r19
 364:	e4 0b       	sbc	r30, r20
 366:	f5 0b       	sbc	r31, r21

00000368 <__udivmodsi4_ep>:
 368:	66 1f       	adc	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	88 1f       	adc	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	1a 94       	dec	r1
 372:	69 f7       	brne	.-38     	; 0x34e <__udivmodsi4_loop>
 374:	60 95       	com	r22
 376:	70 95       	com	r23
 378:	80 95       	com	r24
 37a:	90 95       	com	r25
 37c:	9b 01       	movw	r18, r22
 37e:	ac 01       	movw	r20, r24
 380:	bd 01       	movw	r22, r26
 382:	cf 01       	movw	r24, r30
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
