
Queues.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000590  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000cc  00800200  00800200  00000604  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a8  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000802  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000306  00000000  00000000  00000ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000516  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000208  00000000  00000000  000016fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000286  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000007f1  00000000  00000000  00001b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  0000237b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	cb c1       	rjmp	.+918    	; 0x3fc <__vector_25>
  66:	00 00       	nop
  68:	f4 c1       	rjmp	.+1000   	; 0x452 <__vector_26>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ac 3c       	cpi	r26, 0xCC	; 204
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	4f d1       	rcall	.+670    	; 0x3a4 <main>
 106:	42 c2       	rjmp	.+1156   	; 0x58c <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <Q_putc>:
#include <stdio.h>
#include "Queues.h"
#include "System.h"

byte Q_putc(byte qid, char data){
    if(!qcb[qid].pQ) return -1; //Queue doesn't exist
 10a:	e8 2f       	mov	r30, r24
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	df 01       	movw	r26, r30
 110:	aa 0f       	add	r26, r26
 112:	bb 1f       	adc	r27, r27
 114:	aa 0f       	add	r26, r26
 116:	bb 1f       	adc	r27, r27
 118:	aa 0f       	add	r26, r26
 11a:	bb 1f       	adc	r27, r27
 11c:	a0 50       	subi	r26, 0x00	; 0
 11e:	be 4f       	sbci	r27, 0xFE	; 254
 120:	16 96       	adiw	r26, 0x06	; 6
 122:	8d 91       	ld	r24, X+
 124:	9c 91       	ld	r25, X
 126:	17 97       	sbiw	r26, 0x07	; 7
 128:	89 2b       	or	r24, r25
 12a:	21 f1       	breq	.+72     	; 0x174 <Q_putc+0x6a>
    QCB *point = &qcb[qid];
 12c:	fd 01       	movw	r30, r26
    if(point->in==point->out && (point->flags&(1<<Q_FULL))) return -1; //Queue is full
 12e:	80 81       	ld	r24, Z
 130:	91 81       	ldd	r25, Z+1	; 0x01
 132:	89 13       	cpse	r24, r25
 134:	03 c0       	rjmp	.+6      	; 0x13c <Q_putc+0x32>
 136:	93 81       	ldd	r25, Z+3	; 0x03
 138:	90 fd       	sbrc	r25, 0
 13a:	1e c0       	rjmp	.+60     	; 0x178 <Q_putc+0x6e>

    *(point->pQ+point->in) = data;
 13c:	a6 81       	ldd	r26, Z+6	; 0x06
 13e:	b7 81       	ldd	r27, Z+7	; 0x07
 140:	a8 0f       	add	r26, r24
 142:	b1 1d       	adc	r27, r1
 144:	6c 93       	st	X, r22
    point->available++;
 146:	84 81       	ldd	r24, Z+4	; 0x04
 148:	95 81       	ldd	r25, Z+5	; 0x05
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	95 83       	std	Z+5, r25	; 0x05
 14e:	84 83       	std	Z+4, r24	; 0x04
    point->in++;
 150:	80 81       	ld	r24, Z
 152:	8f 5f       	subi	r24, 0xFF	; 255
    point->in &= point->smask;
 154:	92 81       	ldd	r25, Z+2	; 0x02
 156:	89 23       	and	r24, r25
 158:	80 83       	st	Z, r24

    if(point->flags&(1<<Q_EMPTY)) point->flags &= ~(1<<Q_EMPTY);
 15a:	93 81       	ldd	r25, Z+3	; 0x03
 15c:	91 ff       	sbrs	r25, 1
 15e:	02 c0       	rjmp	.+4      	; 0x164 <Q_putc+0x5a>
 160:	9d 7f       	andi	r25, 0xFD	; 253
 162:	93 83       	std	Z+3, r25	; 0x03
    if(point->in==point->out) point->flags|=(1<<Q_FULL);
 164:	91 81       	ldd	r25, Z+1	; 0x01
 166:	89 13       	cpse	r24, r25
 168:	09 c0       	rjmp	.+18     	; 0x17c <Q_putc+0x72>
 16a:	83 81       	ldd	r24, Z+3	; 0x03
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	83 83       	std	Z+3, r24	; 0x03
	return 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	08 95       	ret
#include <stdio.h>
#include "Queues.h"
#include "System.h"

byte Q_putc(byte qid, char data){
    if(!qcb[qid].pQ) return -1; //Queue doesn't exist
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	08 95       	ret
    QCB *point = &qcb[qid];
    if(point->in==point->out && (point->flags&(1<<Q_FULL))) return -1; //Queue is full
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	08 95       	ret
    point->in++;
    point->in &= point->smask;

    if(point->flags&(1<<Q_EMPTY)) point->flags &= ~(1<<Q_EMPTY);
    if(point->in==point->out) point->flags|=(1<<Q_FULL);
	return 1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
}
 17e:	08 95       	ret

00000180 <Q_getc>:

byte Q_getc(byte qid, char *pdata ){
    if(!qcb[qid].pQ) return -1; //Queue doesn't exist
 180:	e8 2f       	mov	r30, r24
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	df 01       	movw	r26, r30
 186:	aa 0f       	add	r26, r26
 188:	bb 1f       	adc	r27, r27
 18a:	aa 0f       	add	r26, r26
 18c:	bb 1f       	adc	r27, r27
 18e:	aa 0f       	add	r26, r26
 190:	bb 1f       	adc	r27, r27
 192:	a0 50       	subi	r26, 0x00	; 0
 194:	be 4f       	sbci	r27, 0xFE	; 254
 196:	16 96       	adiw	r26, 0x06	; 6
 198:	8d 91       	ld	r24, X+
 19a:	9c 91       	ld	r25, X
 19c:	17 97       	sbiw	r26, 0x07	; 7
 19e:	89 2b       	or	r24, r25
 1a0:	61 f1       	breq	.+88     	; 0x1fa <Q_getc+0x7a>
    QCB *point = &qcb[qid];
 1a2:	fd 01       	movw	r30, r26
    if(point->in==point->out && (point->flags&(1<<Q_EMPTY))) return -1; //Queue is empty
 1a4:	81 81       	ldd	r24, Z+1	; 0x01
 1a6:	90 81       	ld	r25, Z
 1a8:	98 13       	cpse	r25, r24
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <Q_getc+0x32>
 1ac:	93 81       	ldd	r25, Z+3	; 0x03
 1ae:	91 fd       	sbrc	r25, 1
 1b0:	26 c0       	rjmp	.+76     	; 0x1fe <Q_getc+0x7e>

    *pdata = *(point->pQ+point->out);
 1b2:	a6 81       	ldd	r26, Z+6	; 0x06
 1b4:	b7 81       	ldd	r27, Z+7	; 0x07
 1b6:	a8 0f       	add	r26, r24
 1b8:	b1 1d       	adc	r27, r1
 1ba:	8c 91       	ld	r24, X
 1bc:	db 01       	movw	r26, r22
 1be:	8c 93       	st	X, r24
    *(point->pQ+point->out) = 0;
 1c0:	81 81       	ldd	r24, Z+1	; 0x01
 1c2:	a6 81       	ldd	r26, Z+6	; 0x06
 1c4:	b7 81       	ldd	r27, Z+7	; 0x07
 1c6:	a8 0f       	add	r26, r24
 1c8:	b1 1d       	adc	r27, r1
 1ca:	1c 92       	st	X, r1
    point->available--;
 1cc:	84 81       	ldd	r24, Z+4	; 0x04
 1ce:	95 81       	ldd	r25, Z+5	; 0x05
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	95 83       	std	Z+5, r25	; 0x05
 1d4:	84 83       	std	Z+4, r24	; 0x04
    point->out++;
 1d6:	81 81       	ldd	r24, Z+1	; 0x01
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
    point->out &= point->smask;
 1da:	92 81       	ldd	r25, Z+2	; 0x02
 1dc:	89 23       	and	r24, r25
 1de:	81 83       	std	Z+1, r24	; 0x01

    if(point->flags&(1<<Q_FULL)) point->flags &= ~(1<<Q_FULL);
 1e0:	93 81       	ldd	r25, Z+3	; 0x03
 1e2:	90 ff       	sbrs	r25, 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <Q_getc+0x6a>
 1e6:	9e 7f       	andi	r25, 0xFE	; 254
 1e8:	93 83       	std	Z+3, r25	; 0x03
    if(point->in==point->out) point->flags|=(1<<Q_EMPTY);
 1ea:	90 81       	ld	r25, Z
 1ec:	89 13       	cpse	r24, r25
 1ee:	09 c0       	rjmp	.+18     	; 0x202 <Q_getc+0x82>
 1f0:	83 81       	ldd	r24, Z+3	; 0x03
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	83 83       	std	Z+3, r24	; 0x03
	return 1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	08 95       	ret
    if(point->in==point->out) point->flags|=(1<<Q_FULL);
	return 1;
}

byte Q_getc(byte qid, char *pdata ){
    if(!qcb[qid].pQ) return -1; //Queue doesn't exist
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	08 95       	ret
    QCB *point = &qcb[qid];
    if(point->in==point->out && (point->flags&(1<<Q_EMPTY))) return -1; //Queue is empty
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	08 95       	ret
    point->out++;
    point->out &= point->smask;

    if(point->flags&(1<<Q_FULL)) point->flags &= ~(1<<Q_FULL);
    if(point->in==point->out) point->flags|=(1<<Q_EMPTY);
	return 1;
 202:	81 e0       	ldi	r24, 0x01	; 1
}
 204:	08 95       	ret

00000206 <Q_create>:

int8_t Q_create(int qsize, char * pbuffer){
    int i,j;
	if(qsize&(qsize-1)) return -1;
 206:	9c 01       	movw	r18, r24
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	31 09       	sbc	r19, r1
 20c:	28 23       	and	r18, r24
 20e:	39 23       	and	r19, r25
 210:	23 2b       	or	r18, r19
 212:	09 f0       	breq	.+2      	; 0x216 <Q_create+0x10>
 214:	49 c0       	rjmp	.+146    	; 0x2a8 <Q_create+0xa2>
    for(i=0;i<QCB_MAX_COUNT;i++) if(qcb[i].pQ==NULL){
 216:	20 91 06 02 	lds	r18, 0x0206
 21a:	30 91 07 02 	lds	r19, 0x0207
 21e:	23 2b       	or	r18, r19
 220:	49 f0       	breq	.+18     	; 0x234 <Q_create+0x2e>
 222:	ee e0       	ldi	r30, 0x0E	; 14
 224:	f2 e0       	ldi	r31, 0x02	; 2
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	40 81       	ld	r20, Z
 22c:	51 81       	ldd	r21, Z+1	; 0x01
 22e:	45 2b       	or	r20, r21
 230:	a1 f5       	brne	.+104    	; 0x29a <Q_create+0x94>
 232:	02 c0       	rjmp	.+4      	; 0x238 <Q_create+0x32>
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
        qcb[i].pQ = pbuffer;
 238:	f9 01       	movw	r30, r18
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	e0 50       	subi	r30, 0x00	; 0
 248:	fe 4f       	sbci	r31, 0xFE	; 254
 24a:	77 83       	std	Z+7, r23	; 0x07
 24c:	66 83       	std	Z+6, r22	; 0x06
        qcb[i].in = 0;
 24e:	10 82       	st	Z, r1
        qcb[i].out = 0;
 250:	11 82       	std	Z+1, r1	; 0x01
        qcb[i].smask = 31;
 252:	4f e1       	ldi	r20, 0x1F	; 31
 254:	42 83       	std	Z+2, r20	; 0x02
        qcb[i].flags |= (1<<Q_EMPTY);
 256:	43 81       	ldd	r20, Z+3	; 0x03
 258:	42 60       	ori	r20, 0x02	; 2
 25a:	43 83       	std	Z+3, r20	; 0x03
        qcb[i].available = 32;
 25c:	40 e2       	ldi	r20, 0x20	; 32
 25e:	50 e0       	ldi	r21, 0x00	; 0
 260:	55 83       	std	Z+5, r21	; 0x05
 262:	44 83       	std	Z+4, r20	; 0x04
        for(j=0; j<qsize; j++) *(qcb[i].pQ+j) = 0;
 264:	18 16       	cp	r1, r24
 266:	19 06       	cpc	r1, r25
 268:	b4 f4       	brge	.+44     	; 0x296 <Q_create+0x90>
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	d9 01       	movw	r26, r18
 270:	aa 0f       	add	r26, r26
 272:	bb 1f       	adc	r27, r27
 274:	aa 0f       	add	r26, r26
 276:	bb 1f       	adc	r27, r27
 278:	aa 0f       	add	r26, r26
 27a:	bb 1f       	adc	r27, r27
 27c:	aa 5f       	subi	r26, 0xFA	; 250
 27e:	bd 4f       	sbci	r27, 0xFD	; 253
 280:	ed 91       	ld	r30, X+
 282:	fc 91       	ld	r31, X
 284:	11 97       	sbiw	r26, 0x01	; 1
 286:	e4 0f       	add	r30, r20
 288:	f5 1f       	adc	r31, r21
 28a:	10 82       	st	Z, r1
 28c:	4f 5f       	subi	r20, 0xFF	; 255
 28e:	5f 4f       	sbci	r21, 0xFF	; 255
 290:	48 17       	cp	r20, r24
 292:	59 07       	cpc	r21, r25
 294:	a9 f7       	brne	.-22     	; 0x280 <Q_create+0x7a>
        return i;
 296:	82 2f       	mov	r24, r18
 298:	08 95       	ret
}

int8_t Q_create(int qsize, char * pbuffer){
    int i,j;
	if(qsize&(qsize-1)) return -1;
    for(i=0;i<QCB_MAX_COUNT;i++) if(qcb[i].pQ==NULL){
 29a:	2f 5f       	subi	r18, 0xFF	; 255
 29c:	3f 4f       	sbci	r19, 0xFF	; 255
 29e:	38 96       	adiw	r30, 0x08	; 8
 2a0:	28 30       	cpi	r18, 0x08	; 8
 2a2:	31 05       	cpc	r19, r1
 2a4:	11 f6       	brne	.-124    	; 0x22a <Q_create+0x24>
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <Q_create+0xa6>
	return 1;
}

int8_t Q_create(int qsize, char * pbuffer){
    int i,j;
	if(qsize&(qsize-1)) return -1;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	08 95       	ret
        qcb[i].flags |= (1<<Q_EMPTY);
        qcb[i].available = 32;
        for(j=0; j<qsize; j++) *(qcb[i].pQ+j) = 0;
        return i;
    }
    return -1;
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
}
 2ae:	08 95       	ret

000002b0 <Serial_open>:
	sp[port].active = 0;
}

int Serial_available(int port){
	return qcb[sp[port].tx_qcb_id].available;
}
 2b0:	af 92       	push	r10
 2b2:	bf 92       	push	r11
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
 2c6:	fc 01       	movw	r30, r24
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	e8 0f       	add	r30, r24
 2ce:	f9 1f       	adc	r31, r25
 2d0:	e0 54       	subi	r30, 0x40	; 64
 2d2:	fd 4f       	sbci	r31, 0xFD	; 253
 2d4:	80 81       	ld	r24, Z
 2d6:	81 11       	cpse	r24, r1
 2d8:	35 c0       	rjmp	.+106    	; 0x344 <Serial_open+0x94>
 2da:	44 0f       	add	r20, r20
 2dc:	55 1f       	adc	r21, r21
 2de:	66 1f       	adc	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	44 0f       	add	r20, r20
 2e4:	55 1f       	adc	r21, r21
 2e6:	66 1f       	adc	r22, r22
 2e8:	77 1f       	adc	r23, r23
 2ea:	9a 01       	movw	r18, r20
 2ec:	ab 01       	movw	r20, r22
 2ee:	22 0f       	add	r18, r18
 2f0:	33 1f       	adc	r19, r19
 2f2:	44 1f       	adc	r20, r20
 2f4:	55 1f       	adc	r21, r21
 2f6:	22 0f       	add	r18, r18
 2f8:	33 1f       	adc	r19, r19
 2fa:	44 1f       	adc	r20, r20
 2fc:	55 1f       	adc	r21, r21
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	74 e2       	ldi	r23, 0x24	; 36
 302:	84 ef       	ldi	r24, 0xF4	; 244
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	04 d1       	rcall	.+520    	; 0x510 <__divmodsi4>
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	31 09       	sbc	r19, r1
 30c:	30 93 c5 00 	sts	0x00C5, r19
 310:	20 93 c4 00 	sts	0x00C4, r18
 314:	86 e0       	ldi	r24, 0x06	; 6
 316:	80 93 c2 00 	sts	0x00C2, r24
 31a:	88 e1       	ldi	r24, 0x18	; 24
 31c:	80 93 c1 00 	sts	0x00C1, r24
 320:	b6 01       	movw	r22, r12
 322:	c5 01       	movw	r24, r10
 324:	70 df       	rcall	.-288    	; 0x206 <Q_create>
 326:	9e 01       	movw	r18, r28
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	c2 0f       	add	r28, r18
 32e:	d3 1f       	adc	r29, r19
 330:	c0 54       	subi	r28, 0x40	; 64
 332:	dd 4f       	sbci	r29, 0xFD	; 253
 334:	89 83       	std	Y+1, r24	; 0x01
 336:	b8 01       	movw	r22, r16
 338:	c7 01       	movw	r24, r14
 33a:	65 df       	rcall	.-310    	; 0x206 <Q_create>
 33c:	8a 83       	std	Y+2, r24	; 0x02
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <Serial_open+0x98>
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	9f ef       	ldi	r25, 0xFF	; 255
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	df 90       	pop	r13
 356:	cf 90       	pop	r12
 358:	bf 90       	pop	r11
 35a:	af 90       	pop	r10
 35c:	08 95       	ret

0000035e <Serial_read>:

int Serial_read(int port){
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	1f 92       	push	r1
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
	char x;
	if(Q_getc(sp[0].rx_qcb_id,&x)>-1)
 368:	be 01       	movw	r22, r28
 36a:	6f 5f       	subi	r22, 0xFF	; 255
 36c:	7f 4f       	sbci	r23, 0xFF	; 255
 36e:	80 91 c1 02 	lds	r24, 0x02C1
 372:	06 df       	rcall	.-500    	; 0x180 <Q_getc>
		return x;
 374:	89 81       	ldd	r24, Y+1	; 0x01
	return -1;
}
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <Serial_write>:

void Serial_write(int port, char databyte){
	Q_putc(sp[0].tx_qcb_id, databyte);
 380:	80 91 c2 02 	lds	r24, 0x02C2
 384:	c2 de       	rcall	.-636    	; 0x10a <Q_putc>
	UCSR0B |= (1<<UDRIE0);
 386:	e1 ec       	ldi	r30, 0xC1	; 193
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	80 62       	ori	r24, 0x20	; 32
 38e:	80 83       	st	Z, r24
 390:	08 95       	ret

00000392 <init_serial_handlers>:
}

void init_serial_handlers(){
	for(int i = 0; i < 4; i++){
		sp[i].active = 0;
 392:	10 92 c0 02 	sts	0x02C0, r1
 396:	10 92 c3 02 	sts	0x02C3, r1
 39a:	10 92 c6 02 	sts	0x02C6, r1
 39e:	10 92 c9 02 	sts	0x02C9, r1
 3a2:	08 95       	ret

000003a4 <main>:

char rx_buffer[MAX_BUFFER_SIZE];
char tx_buffer[MAX_BUFFER_SIZE];

int main(void){
	init_serial_handlers();
 3a4:	f6 df       	rcall	.-20     	; 0x392 <init_serial_handlers>
	sei();
 3a6:	78 94       	sei
	UCSR0B |= (1<<RXCIE0);
 3a8:	e1 ec       	ldi	r30, 0xC1	; 193
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	80 68       	ori	r24, 0x80	; 128
 3b0:	80 83       	st	Z, r24
	Serial_open(0, 9600, 0, tx_buffer, 32, rx_buffer, 32);
 3b2:	68 94       	set
 3b4:	aa 24       	eor	r10, r10
 3b6:	a5 f8       	bld	r10, 5
 3b8:	b1 2c       	mov	r11, r1
 3ba:	0f 2e       	mov	r0, r31
 3bc:	f0 e4       	ldi	r31, 0x40	; 64
 3be:	cf 2e       	mov	r12, r31
 3c0:	f2 e0       	ldi	r31, 0x02	; 2
 3c2:	df 2e       	mov	r13, r31
 3c4:	f0 2d       	mov	r31, r0
 3c6:	68 94       	set
 3c8:	ee 24       	eor	r14, r14
 3ca:	e5 f8       	bld	r14, 5
 3cc:	f1 2c       	mov	r15, r1
 3ce:	00 e8       	ldi	r16, 0x80	; 128
 3d0:	12 e0       	ldi	r17, 0x02	; 2
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	40 e8       	ldi	r20, 0x80	; 128
 3d8:	55 e2       	ldi	r21, 0x25	; 37
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	66 df       	rcall	.-308    	; 0x2b0 <Serial_open>
	while(1){
		Serial_write(0, 'F');
 3e4:	66 e4       	ldi	r22, 0x46	; 70
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	ca df       	rcall	.-108    	; 0x380 <Serial_write>
		Serial_write(0, Serial_read(0));
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	b6 df       	rcall	.-148    	; 0x35e <Serial_read>
 3f2:	68 2f       	mov	r22, r24
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	c3 df       	rcall	.-122    	; 0x380 <Serial_write>
 3fa:	f4 cf       	rjmp	.-24     	; 0x3e4 <main+0x40>

000003fc <__vector_25>:
	for(int i = 0; i < 4; i++){
		sp[i].active = 0;
	}
}

ISR(USART0_RX_vect){
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
 406:	0b b6       	in	r0, 0x3b	; 59
 408:	0f 92       	push	r0
 40a:	2f 93       	push	r18
 40c:	3f 93       	push	r19
 40e:	4f 93       	push	r20
 410:	5f 93       	push	r21
 412:	6f 93       	push	r22
 414:	7f 93       	push	r23
 416:	8f 93       	push	r24
 418:	9f 93       	push	r25
 41a:	af 93       	push	r26
 41c:	bf 93       	push	r27
 41e:	ef 93       	push	r30
 420:	ff 93       	push	r31
	Q_putc(sp[0].rx_qcb_id, UDR0);
 422:	60 91 c6 00 	lds	r22, 0x00C6
 426:	80 91 c1 02 	lds	r24, 0x02C1
 42a:	6f de       	rcall	.-802    	; 0x10a <Q_putc>
}
 42c:	ff 91       	pop	r31
 42e:	ef 91       	pop	r30
 430:	bf 91       	pop	r27
 432:	af 91       	pop	r26
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	7f 91       	pop	r23
 43a:	6f 91       	pop	r22
 43c:	5f 91       	pop	r21
 43e:	4f 91       	pop	r20
 440:	3f 91       	pop	r19
 442:	2f 91       	pop	r18
 444:	0f 90       	pop	r0
 446:	0b be       	out	0x3b, r0	; 59
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <__vector_26>:

ISR(USART0_UDRE_vect){
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
 45c:	0b b6       	in	r0, 0x3b	; 59
 45e:	0f 92       	push	r0
 460:	2f 93       	push	r18
 462:	3f 93       	push	r19
 464:	4f 93       	push	r20
 466:	5f 93       	push	r21
 468:	6f 93       	push	r22
 46a:	7f 93       	push	r23
 46c:	8f 93       	push	r24
 46e:	9f 93       	push	r25
 470:	af 93       	push	r26
 472:	bf 93       	push	r27
 474:	ef 93       	push	r30
 476:	ff 93       	push	r31
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	1f 92       	push	r1
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
	if(!qcb[sp[0].tx_qcb_id].available) UCSR0B &= ~(1<<UDRIE0);
 482:	80 91 c2 02 	lds	r24, 0x02C2
 486:	e8 2f       	mov	r30, r24
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	ee 0f       	add	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	ee 0f       	add	r30, r30
 494:	ff 1f       	adc	r31, r31
 496:	e0 50       	subi	r30, 0x00	; 0
 498:	fe 4f       	sbci	r31, 0xFE	; 254
 49a:	24 81       	ldd	r18, Z+4	; 0x04
 49c:	35 81       	ldd	r19, Z+5	; 0x05
 49e:	23 2b       	or	r18, r19
 4a0:	31 f4       	brne	.+12     	; 0x4ae <__vector_26+0x5c>
 4a2:	e1 ec       	ldi	r30, 0xC1	; 193
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	8f 7d       	andi	r24, 0xDF	; 223
 4aa:	80 83       	st	Z, r24
 4ac:	07 c0       	rjmp	.+14     	; 0x4bc <__vector_26+0x6a>
	else{
		char x;
		Q_getc(sp[0].tx_qcb_id, &x);
 4ae:	be 01       	movw	r22, r28
 4b0:	6f 5f       	subi	r22, 0xFF	; 255
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	65 de       	rcall	.-822    	; 0x180 <Q_getc>
		UDR0 = x;
 4b6:	89 81       	ldd	r24, Y+1	; 0x01
 4b8:	80 93 c6 00 	sts	0x00C6, r24
	}
	if(!qcb[sp[0].tx_qcb_id].available) UCSR0B &= ~(1<<UDRIE0);
 4bc:	e0 91 c2 02 	lds	r30, 0x02C2
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	e0 50       	subi	r30, 0x00	; 0
 4d0:	fe 4f       	sbci	r31, 0xFE	; 254
 4d2:	84 81       	ldd	r24, Z+4	; 0x04
 4d4:	95 81       	ldd	r25, Z+5	; 0x05
 4d6:	89 2b       	or	r24, r25
 4d8:	29 f4       	brne	.+10     	; 0x4e4 <__vector_26+0x92>
 4da:	e1 ec       	ldi	r30, 0xC1	; 193
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	8f 7d       	andi	r24, 0xDF	; 223
 4e2:	80 83       	st	Z, r24
 4e4:	0f 90       	pop	r0
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	ff 91       	pop	r31
 4ec:	ef 91       	pop	r30
 4ee:	bf 91       	pop	r27
 4f0:	af 91       	pop	r26
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	7f 91       	pop	r23
 4f8:	6f 91       	pop	r22
 4fa:	5f 91       	pop	r21
 4fc:	4f 91       	pop	r20
 4fe:	3f 91       	pop	r19
 500:	2f 91       	pop	r18
 502:	0f 90       	pop	r0
 504:	0b be       	out	0x3b, r0	; 59
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <__divmodsi4>:
 510:	05 2e       	mov	r0, r21
 512:	97 fb       	bst	r25, 7
 514:	16 f4       	brtc	.+4      	; 0x51a <__divmodsi4+0xa>
 516:	00 94       	com	r0
 518:	0f d0       	rcall	.+30     	; 0x538 <__negsi2>
 51a:	57 fd       	sbrc	r21, 7
 51c:	05 d0       	rcall	.+10     	; 0x528 <__divmodsi4_neg2>
 51e:	14 d0       	rcall	.+40     	; 0x548 <__udivmodsi4>
 520:	07 fc       	sbrc	r0, 7
 522:	02 d0       	rcall	.+4      	; 0x528 <__divmodsi4_neg2>
 524:	46 f4       	brtc	.+16     	; 0x536 <__divmodsi4_exit>
 526:	08 c0       	rjmp	.+16     	; 0x538 <__negsi2>

00000528 <__divmodsi4_neg2>:
 528:	50 95       	com	r21
 52a:	40 95       	com	r20
 52c:	30 95       	com	r19
 52e:	21 95       	neg	r18
 530:	3f 4f       	sbci	r19, 0xFF	; 255
 532:	4f 4f       	sbci	r20, 0xFF	; 255
 534:	5f 4f       	sbci	r21, 0xFF	; 255

00000536 <__divmodsi4_exit>:
 536:	08 95       	ret

00000538 <__negsi2>:
 538:	90 95       	com	r25
 53a:	80 95       	com	r24
 53c:	70 95       	com	r23
 53e:	61 95       	neg	r22
 540:	7f 4f       	sbci	r23, 0xFF	; 255
 542:	8f 4f       	sbci	r24, 0xFF	; 255
 544:	9f 4f       	sbci	r25, 0xFF	; 255
 546:	08 95       	ret

00000548 <__udivmodsi4>:
 548:	a1 e2       	ldi	r26, 0x21	; 33
 54a:	1a 2e       	mov	r1, r26
 54c:	aa 1b       	sub	r26, r26
 54e:	bb 1b       	sub	r27, r27
 550:	fd 01       	movw	r30, r26
 552:	0d c0       	rjmp	.+26     	; 0x56e <__udivmodsi4_ep>

00000554 <__udivmodsi4_loop>:
 554:	aa 1f       	adc	r26, r26
 556:	bb 1f       	adc	r27, r27
 558:	ee 1f       	adc	r30, r30
 55a:	ff 1f       	adc	r31, r31
 55c:	a2 17       	cp	r26, r18
 55e:	b3 07       	cpc	r27, r19
 560:	e4 07       	cpc	r30, r20
 562:	f5 07       	cpc	r31, r21
 564:	20 f0       	brcs	.+8      	; 0x56e <__udivmodsi4_ep>
 566:	a2 1b       	sub	r26, r18
 568:	b3 0b       	sbc	r27, r19
 56a:	e4 0b       	sbc	r30, r20
 56c:	f5 0b       	sbc	r31, r21

0000056e <__udivmodsi4_ep>:
 56e:	66 1f       	adc	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	88 1f       	adc	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	1a 94       	dec	r1
 578:	69 f7       	brne	.-38     	; 0x554 <__udivmodsi4_loop>
 57a:	60 95       	com	r22
 57c:	70 95       	com	r23
 57e:	80 95       	com	r24
 580:	90 95       	com	r25
 582:	9b 01       	movw	r18, r22
 584:	ac 01       	movw	r20, r24
 586:	bd 01       	movw	r22, r26
 588:	cf 01       	movw	r24, r30
 58a:	08 95       	ret

0000058c <_exit>:
 58c:	f8 94       	cli

0000058e <__stop_program>:
 58e:	ff cf       	rjmp	.-2      	; 0x58e <__stop_program>
