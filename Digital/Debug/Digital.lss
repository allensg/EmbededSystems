
Digital.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800200  000004ae  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008002e0  008002e0  00000622  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005fb  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000021b  00000000  00000000  00000ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d4  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fa  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005b9  00000000  00000000  0000159a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001b53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ea       	ldi	r30, 0xAE	; 174
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 3e       	cpi	r26, 0xE0	; 224
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 ee       	ldi	r26, 0xE0	; 224
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 3e       	cpi	r26, 0xE2	; 226
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	2e d1       	rcall	.+604    	; 0x37c <main>
 120:	c4 c1       	rjmp	.+904    	; 0x4aa <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <pinMode>:
		}
	}
}

int pinMode(int pNo, int type){
	if(pNo < 0 || pNo > 53)
 124:	86 33       	cpi	r24, 0x36	; 54
 126:	91 05       	cpc	r25, r1
 128:	b0 f5       	brcc	.+108    	; 0x196 <pinMode+0x72>
		return -1;
	struct pinMap n = map[pNo];
 12a:	dc 01       	movw	r26, r24
 12c:	aa 0f       	add	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	aa 0f       	add	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	a0 50       	subi	r26, 0x00	; 0
 136:	be 4f       	sbci	r27, 0xFE	; 254
	volatile uint8_t * address = (volatile uint8_t *) n.addr;
 138:	ed 91       	ld	r30, X+
 13a:	fc 91       	ld	r31, X
 13c:	11 97       	sbiw	r26, 0x01	; 1
	int mask = (1<<n.bit);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	12 96       	adiw	r26, 0x02	; 2
 144:	0c 90       	ld	r0, X
 146:	02 c0       	rjmp	.+4      	; 0x14c <pinMode+0x28>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <pinMode+0x24>

	switch(type){
 150:	61 30       	cpi	r22, 0x01	; 1
 152:	71 05       	cpc	r23, r1
 154:	79 f0       	breq	.+30     	; 0x174 <pinMode+0x50>
 156:	62 30       	cpi	r22, 0x02	; 2
 158:	71 05       	cpc	r23, r1
 15a:	91 f0       	breq	.+36     	; 0x180 <pinMode+0x5c>
 15c:	67 2b       	or	r22, r23
 15e:	f1 f4       	brne	.+60     	; 0x19c <pinMode+0x78>
		case 0x0:
			address[1] &= (~mask);
 160:	91 81       	ldd	r25, Z+1	; 0x01
 162:	80 95       	com	r24
 164:	98 23       	and	r25, r24
 166:	91 83       	std	Z+1, r25	; 0x01
			address[2] &= (~mask);
 168:	92 81       	ldd	r25, Z+2	; 0x02
 16a:	89 23       	and	r24, r25
 16c:	82 83       	std	Z+2, r24	; 0x02
			address[2] |= mask;
			break;
		default:
			break;
	}
	return 0;
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0

	switch(type){
		case 0x0:
			address[1] &= (~mask);
			address[2] &= (~mask);
			break;
 172:	08 95       	ret
		case 0x1:
			address[1] |= mask;
 174:	91 81       	ldd	r25, Z+1	; 0x01
 176:	89 2b       	or	r24, r25
 178:	81 83       	std	Z+1, r24	; 0x01
			address[2] |= mask;
			break;
		default:
			break;
	}
	return 0;
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
			address[1] &= (~mask);
			address[2] &= (~mask);
			break;
		case 0x1:
			address[1] |= mask;
			break;
 17e:	08 95       	ret
		case 0x2:
			address[1] &= (~mask);
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	28 2f       	mov	r18, r24
 184:	20 95       	com	r18
 186:	92 23       	and	r25, r18
 188:	91 83       	std	Z+1, r25	; 0x01
			address[2] |= mask;
 18a:	92 81       	ldd	r25, Z+2	; 0x02
 18c:	89 2b       	or	r24, r25
 18e:	82 83       	std	Z+2, r24	; 0x02
			break;
		default:
			break;
	}
	return 0;
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
			address[1] |= mask;
			break;
		case 0x2:
			address[1] &= (~mask);
			address[2] |= mask;
			break;
 194:	08 95       	ret
	}
}

int pinMode(int pNo, int type){
	if(pNo < 0 || pNo > 53)
		return -1;
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	9f ef       	ldi	r25, 0xFF	; 255
 19a:	08 95       	ret
			address[2] |= mask;
			break;
		default:
			break;
	}
	return 0;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
}
 1a0:	08 95       	ret

000001a2 <digitalRead>:

int digitalRead(int pNo){
	struct pinMap n = map[pNo];
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	dc 01       	movw	r26, r24
 1ac:	a0 50       	subi	r26, 0x00	; 0
 1ae:	be 4f       	sbci	r27, 0xFE	; 254
	volatile uint8_t * address = (volatile uint8_t *) n.addr;
 1b0:	ed 91       	ld	r30, X+
 1b2:	fc 91       	ld	r31, X
 1b4:	11 97       	sbiw	r26, 0x01	; 1
	int mask = (1<<n.bit);
	return (!!(address[0] &= mask));
 1b6:	40 81       	ld	r20, Z
}

int digitalRead(int pNo){
	struct pinMap n = map[pNo];
	volatile uint8_t * address = (volatile uint8_t *) n.addr;
	int mask = (1<<n.bit);
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	c9 01       	movw	r24, r18
 1be:	12 96       	adiw	r26, 0x02	; 2
 1c0:	0c 90       	ld	r0, X
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <digitalRead+0x26>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <digitalRead+0x22>
	return (!!(address[0] &= mask));
 1cc:	24 2f       	mov	r18, r20
 1ce:	28 23       	and	r18, r24
 1d0:	20 83       	st	Z, r18
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	21 11       	cpse	r18, r1
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <digitalRead+0x3c>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
}
 1de:	08 95       	ret

000001e0 <digitalWrite>:

void digitalWrite(int pNo, int value){
	struct pinMap n = map[pNo];
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	fc 01       	movw	r30, r24
 1ea:	e0 50       	subi	r30, 0x00	; 0
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
	volatile uint8_t * address = (volatile uint8_t *) n.addr;
 1ee:	a0 81       	ld	r26, Z
 1f0:	b1 81       	ldd	r27, Z+1	; 0x01
	int mask = (1<<n.bit);
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 80       	ldd	r0, Z+2	; 0x02
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <digitalWrite+0x1e>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <digitalWrite+0x1a>
	if(value == HIGH)
 202:	61 30       	cpi	r22, 0x01	; 1
 204:	71 05       	cpc	r23, r1
 206:	39 f4       	brne	.+14     	; 0x216 <digitalWrite+0x36>
		address[2] |= mask;
 208:	12 96       	adiw	r26, 0x02	; 2
 20a:	9c 91       	ld	r25, X
 20c:	12 97       	sbiw	r26, 0x02	; 2
 20e:	89 2b       	or	r24, r25
 210:	12 96       	adiw	r26, 0x02	; 2
 212:	8c 93       	st	X, r24
 214:	08 95       	ret
	else if(value == LOW)
 216:	67 2b       	or	r22, r23
 218:	39 f4       	brne	.+14     	; 0x228 <digitalWrite+0x48>
		address[2] &= ~mask;
 21a:	12 96       	adiw	r26, 0x02	; 2
 21c:	9c 91       	ld	r25, X
 21e:	12 97       	sbiw	r26, 0x02	; 2
 220:	80 95       	com	r24
 222:	89 23       	and	r24, r25
 224:	12 96       	adiw	r26, 0x02	; 2
 226:	8c 93       	st	X, r24
 228:	08 95       	ret

0000022a <allOff>:
		_delay_ms(500);
		digitalWrite(lights[i],LOW);
	}
}

void allOff(int lights[]){
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	8c 01       	movw	r16, r24
	for(int i=0;i<NUM_LIGHTS;i++){
 234:	c0 e0       	ldi	r28, 0x00	; 0
 236:	d0 e0       	ldi	r29, 0x00	; 0
		digitalWrite(lights[i],LOW);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	f8 01       	movw	r30, r16
 23e:	81 91       	ld	r24, Z+
 240:	91 91       	ld	r25, Z+
 242:	8f 01       	movw	r16, r30
 244:	cd df       	rcall	.-102    	; 0x1e0 <digitalWrite>
		digitalWrite(lights[i],LOW);
	}
}

void allOff(int lights[]){
	for(int i=0;i<NUM_LIGHTS;i++){
 246:	21 96       	adiw	r28, 0x01	; 1
 248:	c4 30       	cpi	r28, 0x04	; 4
 24a:	d1 05       	cpc	r29, r1
 24c:	a9 f7       	brne	.-22     	; 0x238 <allOff+0xe>
		digitalWrite(lights[i],LOW);
	}
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <flash>:
		address[2] |= mask;
	else if(value == LOW)
		address[2] &= ~mask;
}

void flash(int lights[],int buttons[]){
 258:	ef 92       	push	r14
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	e8 2e       	mov	r14, r24
 266:	f9 2e       	mov	r15, r25
	int i;
	allOff(lights);
 268:	e0 df       	rcall	.-64     	; 0x22a <allOff>
 26a:	0e 2d       	mov	r16, r14
 26c:	1f 2d       	mov	r17, r15
 26e:	c4 e0       	ldi	r28, 0x04	; 4
 270:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0;i<NUM_LIGHTS;i++){
		digitalWrite(lights[i],HIGH);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	f8 01       	movw	r30, r16
 278:	81 91       	ld	r24, Z+
 27a:	91 91       	ld	r25, Z+
 27c:	8f 01       	movw	r16, r30
 27e:	b0 df       	rcall	.-160    	; 0x1e0 <digitalWrite>
 280:	21 97       	sbiw	r28, 0x01	; 1
}

void flash(int lights[],int buttons[]){
	int i;
	allOff(lights);
	for(i=0;i<NUM_LIGHTS;i++){
 282:	20 97       	sbiw	r28, 0x00	; 0
 284:	b1 f7       	brne	.-20     	; 0x272 <flash+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	ff e9       	ldi	r31, 0x9F	; 159
 288:	26 e8       	ldi	r18, 0x86	; 134
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	f1 50       	subi	r31, 0x01	; 1
 28e:	20 40       	sbci	r18, 0x00	; 0
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <flash+0x34>
 294:	00 c0       	rjmp	.+0      	; 0x296 <flash+0x3e>
 296:	00 00       	nop
 298:	0e 2d       	mov	r16, r14
 29a:	1f 2d       	mov	r17, r15
		digitalWrite(lights[i],HIGH);
	}
	_delay_ms(500);
	for(i=0;i<NUM_LIGHTS;i++){
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	d0 e0       	ldi	r29, 0x00	; 0
		digitalWrite(lights[i],LOW);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	f8 01       	movw	r30, r16
 2a6:	81 91       	ld	r24, Z+
 2a8:	91 91       	ld	r25, Z+
 2aa:	8f 01       	movw	r16, r30
 2ac:	99 df       	rcall	.-206    	; 0x1e0 <digitalWrite>
	allOff(lights);
	for(i=0;i<NUM_LIGHTS;i++){
		digitalWrite(lights[i],HIGH);
	}
	_delay_ms(500);
	for(i=0;i<NUM_LIGHTS;i++){
 2ae:	21 96       	adiw	r28, 0x01	; 1
 2b0:	c4 30       	cpi	r28, 0x04	; 4
 2b2:	d1 05       	cpc	r29, r1
 2b4:	a9 f7       	brne	.-22     	; 0x2a0 <flash+0x48>
 2b6:	ff e9       	ldi	r31, 0x9F	; 159
 2b8:	26 e8       	ldi	r18, 0x86	; 134
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	f1 50       	subi	r31, 0x01	; 1
 2be:	20 40       	sbci	r18, 0x00	; 0
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <flash+0x64>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <flash+0x6e>
 2c6:	00 00       	nop
		digitalWrite(lights[i],LOW);
	}
	_delay_ms(500);
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	08 95       	ret

000002d6 <rotate>:

void rotate(int lights[]){
 2d6:	ef 92       	push	r14
 2d8:	ff 92       	push	r15
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	08 2f       	mov	r16, r24
 2e4:	19 2f       	mov	r17, r25
	int i;
	allOff(lights);
 2e6:	a1 df       	rcall	.-190    	; 0x22a <allOff>
 2e8:	c0 2f       	mov	r28, r16
 2ea:	d1 2f       	mov	r29, r17
	for(i=0;i<NUM_LIGHTS;i++){
 2ec:	00 e0       	ldi	r16, 0x00	; 0
 2ee:	10 e0       	ldi	r17, 0x00	; 0
 2f0:	7e 01       	movw	r14, r28
		digitalWrite(lights[i],HIGH);
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	89 91       	ld	r24, Y+
 2f8:	99 91       	ld	r25, Y+
 2fa:	72 df       	rcall	.-284    	; 0x1e0 <digitalWrite>
 2fc:	2f e9       	ldi	r18, 0x9F	; 159
 2fe:	86 e8       	ldi	r24, 0x86	; 134
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	21 50       	subi	r18, 0x01	; 1
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <rotate+0x2c>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <rotate+0x36>
 30c:	00 00       	nop
		_delay_ms(500);
		digitalWrite(lights[i],LOW);
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	f7 01       	movw	r30, r14
 314:	80 81       	ld	r24, Z
 316:	91 81       	ldd	r25, Z+1	; 0x01
 318:	63 df       	rcall	.-314    	; 0x1e0 <digitalWrite>
}

void rotate(int lights[]){
	int i;
	allOff(lights);
	for(i=0;i<NUM_LIGHTS;i++){
 31a:	0f 5f       	subi	r16, 0xFF	; 255
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
 31e:	04 30       	cpi	r16, 0x04	; 4
 320:	11 05       	cpc	r17, r1
 322:	31 f7       	brne	.-52     	; 0x2f0 <rotate+0x1a>
		digitalWrite(lights[i],HIGH);
		_delay_ms(500);
		digitalWrite(lights[i],LOW);
	}
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	08 95       	ret

00000332 <buttonCapture>:
	for(int i=0;i<NUM_LIGHTS;i++){
		digitalWrite(lights[i],LOW);
	}
}

int buttonCapture(int buttons[]){
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	ec 01       	movw	r28, r24
	for(int i=0;i<NUM_BUTTONS;i++)
		if(digitalRead(buttons[i])==LOW){
 33c:	88 81       	ld	r24, Y
 33e:	99 81       	ldd	r25, Y+1	; 0x01
 340:	30 df       	rcall	.-416    	; 0x1a2 <digitalRead>
 342:	89 2b       	or	r24, r25
 344:	49 f0       	breq	.+18     	; 0x358 <buttonCapture+0x26>
 346:	8e 01       	movw	r16, r28
 348:	0e 5f       	subi	r16, 0xFE	; 254
 34a:	1f 4f       	sbci	r17, 0xFF	; 255
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	9b 81       	ldd	r25, Y+3	; 0x03
 350:	28 df       	rcall	.-432    	; 0x1a2 <digitalRead>
 352:	89 2b       	or	r24, r25
 354:	61 f4       	brne	.+24     	; 0x36e <buttonCapture+0x3c>
 356:	01 c0       	rjmp	.+2      	; 0x35a <buttonCapture+0x28>
 358:	8e 01       	movw	r16, r28
			while(digitalRead(buttons[i])==LOW){}
 35a:	f8 01       	movw	r30, r16
 35c:	80 81       	ld	r24, Z
 35e:	91 81       	ldd	r25, Z+1	; 0x01
 360:	20 df       	rcall	.-448    	; 0x1a2 <digitalRead>
 362:	89 2b       	or	r24, r25
 364:	d1 f3       	breq	.-12     	; 0x35a <buttonCapture+0x28>
			return buttons[i];
 366:	f8 01       	movw	r30, r16
 368:	80 81       	ld	r24, Z
 36a:	91 81       	ldd	r25, Z+1	; 0x01
 36c:	02 c0       	rjmp	.+4      	; 0x372 <buttonCapture+0x40>
		}
	return 0;
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	08 95       	ret

0000037c <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	2c 97       	sbiw	r28, 0x0c	; 12
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
	int lights[NUM_LIGHTS]={13,12,11,10};
 390:	88 e0       	ldi	r24, 0x08	; 8
 392:	e8 ed       	ldi	r30, 0xD8	; 216
 394:	f2 e0       	ldi	r31, 0x02	; 2
 396:	de 01       	movw	r26, r28
 398:	11 96       	adiw	r26, 0x01	; 1
 39a:	01 90       	ld	r0, Z+
 39c:	0d 92       	st	X+, r0
 39e:	8a 95       	dec	r24
 3a0:	e1 f7       	brne	.-8      	; 0x39a <main+0x1e>
	int buttons[NUM_BUTTONS]={9,8};
 3a2:	89 e0       	ldi	r24, 0x09	; 9
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	9a 87       	std	Y+10, r25	; 0x0a
 3a8:	89 87       	std	Y+9, r24	; 0x09
 3aa:	88 e0       	ldi	r24, 0x08	; 8
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	9c 87       	std	Y+12, r25	; 0x0c
 3b0:	8b 87       	std	Y+11, r24	; 0x0b
	state = 0;
 3b2:	10 92 e1 02 	sts	0x02E1, r1
 3b6:	10 92 e0 02 	sts	0x02E0, r1
 3ba:	8e 01       	movw	r16, r28
 3bc:	0f 5f       	subi	r16, 0xFF	; 255
 3be:	1f 4f       	sbci	r17, 0xFF	; 255
 3c0:	7e 01       	movw	r14, r28
 3c2:	89 e0       	ldi	r24, 0x09	; 9
 3c4:	e8 0e       	add	r14, r24
 3c6:	f1 1c       	adc	r15, r1
	for(int i=0;i<NUM_LIGHTS;i++)pinMode(lights[i],OUTPUT);
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	f8 01       	movw	r30, r16
 3ce:	81 91       	ld	r24, Z+
 3d0:	91 91       	ld	r25, Z+
 3d2:	8f 01       	movw	r16, r30
 3d4:	a7 de       	rcall	.-690    	; 0x124 <pinMode>
 3d6:	0e 15       	cp	r16, r14
 3d8:	1f 05       	cpc	r17, r15
 3da:	b1 f7       	brne	.-20     	; 0x3c8 <main+0x4c>
	for(int i=0;i<NUM_BUTTONS;i++)pinMode(buttons[i],INPUT_PULLUP);
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	89 85       	ldd	r24, Y+9	; 0x09
 3e2:	9a 85       	ldd	r25, Y+10	; 0x0a
 3e4:	9f de       	rcall	.-706    	; 0x124 <pinMode>
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	8b 85       	ldd	r24, Y+11	; 0x0b
 3ec:	9c 85       	ldd	r25, Y+12	; 0x0c
 3ee:	9a de       	rcall	.-716    	; 0x124 <pinMode>
				default:
					break;
			}
		}
		while(state==STATE_FLASH){
			flash(lights,buttons);
 3f0:	ce 01       	movw	r24, r28
 3f2:	09 96       	adiw	r24, 0x09	; 9
 3f4:	6c 01       	movw	r12, r24
					break;
			}
		}
		while(state==STATE_ROTATE){
			rotate(lights);
			switch(buttonCapture(buttons))
 3f6:	a8 2e       	mov	r10, r24
 3f8:	bd 2c       	mov	r11, r13
			{
				case 9:
					state=STATE_FLASH;
 3fa:	01 e0       	ldi	r16, 0x01	; 1
 3fc:	10 e0       	ldi	r17, 0x00	; 0
			{
				case 9:
					state=STATE_OFF;
					break;
				case 8:
					state=STATE_ROTATE;
 3fe:	68 94       	set
 400:	ee 24       	eor	r14, r14
 402:	e1 f8       	bld	r14, 1
 404:	f1 2c       	mov	r15, r1
 406:	10 c0       	rjmp	.+32     	; 0x428 <main+0xac>
	for(int i=0;i<NUM_LIGHTS;i++)pinMode(lights[i],OUTPUT);
	for(int i=0;i<NUM_BUTTONS;i++)pinMode(buttons[i],INPUT_PULLUP);
	while(1){
		while(!state){
			//if(buttonCapture(buttons)==9)state=STATE_FLASH;
			switch(buttonCapture(buttons))
 408:	c6 01       	movw	r24, r12
 40a:	93 df       	rcall	.-218    	; 0x332 <buttonCapture>
 40c:	88 30       	cpi	r24, 0x08	; 8
 40e:	91 05       	cpc	r25, r1
 410:	39 f0       	breq	.+14     	; 0x420 <main+0xa4>
 412:	09 97       	sbiw	r24, 0x09	; 9
 414:	49 f4       	brne	.+18     	; 0x428 <main+0xac>
			{
				case 9:
					state=STATE_FLASH;
 416:	10 93 e1 02 	sts	0x02E1, r17
 41a:	00 93 e0 02 	sts	0x02E0, r16
					break;
 41e:	04 c0       	rjmp	.+8      	; 0x428 <main+0xac>
				case 8:
					state=STATE_ROTATE;
 420:	f0 92 e1 02 	sts	0x02E1, r15
 424:	e0 92 e0 02 	sts	0x02E0, r14
	int buttons[NUM_BUTTONS]={9,8};
	state = 0;
	for(int i=0;i<NUM_LIGHTS;i++)pinMode(lights[i],OUTPUT);
	for(int i=0;i<NUM_BUTTONS;i++)pinMode(buttons[i],INPUT_PULLUP);
	while(1){
		while(!state){
 428:	80 91 e0 02 	lds	r24, 0x02E0
 42c:	90 91 e1 02 	lds	r25, 0x02E1
 430:	89 2b       	or	r24, r25
 432:	51 f3       	breq	.-44     	; 0x408 <main+0x8c>
 434:	16 c0       	rjmp	.+44     	; 0x462 <main+0xe6>
				default:
					break;
			}
		}
		while(state==STATE_FLASH){
			flash(lights,buttons);
 436:	6a 2d       	mov	r22, r10
 438:	7b 2d       	mov	r23, r11
 43a:	ce 01       	movw	r24, r28
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	0c df       	rcall	.-488    	; 0x258 <flash>
			switch(buttonCapture(buttons))
 440:	8a 2d       	mov	r24, r10
 442:	9b 2d       	mov	r25, r11
 444:	76 df       	rcall	.-276    	; 0x332 <buttonCapture>
 446:	88 30       	cpi	r24, 0x08	; 8
 448:	91 05       	cpc	r25, r1
 44a:	39 f0       	breq	.+14     	; 0x45a <main+0xde>
 44c:	09 97       	sbiw	r24, 0x09	; 9
 44e:	49 f4       	brne	.+18     	; 0x462 <main+0xe6>
			{
				case 9:
					state=STATE_OFF;
 450:	10 92 e1 02 	sts	0x02E1, r1
 454:	10 92 e0 02 	sts	0x02E0, r1
					break;
 458:	04 c0       	rjmp	.+8      	; 0x462 <main+0xe6>
				case 8:
					state=STATE_ROTATE;
 45a:	f0 92 e1 02 	sts	0x02E1, r15
 45e:	e0 92 e0 02 	sts	0x02E0, r14
					break;
				default:
					break;
			}
		}
		while(state==STATE_FLASH){
 462:	20 91 e0 02 	lds	r18, 0x02E0
 466:	30 91 e1 02 	lds	r19, 0x02E1
 46a:	21 30       	cpi	r18, 0x01	; 1
 46c:	31 05       	cpc	r19, r1
 46e:	19 f3       	breq	.-58     	; 0x436 <main+0xba>
 470:	14 c0       	rjmp	.+40     	; 0x49a <main+0x11e>
				default:
					break;
			}
		}
		while(state==STATE_ROTATE){
			rotate(lights);
 472:	ce 01       	movw	r24, r28
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	2f df       	rcall	.-418    	; 0x2d6 <rotate>
			switch(buttonCapture(buttons))
 478:	8a 2d       	mov	r24, r10
 47a:	9b 2d       	mov	r25, r11
 47c:	5a df       	rcall	.-332    	; 0x332 <buttonCapture>
 47e:	88 30       	cpi	r24, 0x08	; 8
 480:	91 05       	cpc	r25, r1
 482:	39 f0       	breq	.+14     	; 0x492 <main+0x116>
 484:	09 97       	sbiw	r24, 0x09	; 9
 486:	49 f4       	brne	.+18     	; 0x49a <main+0x11e>
			{
				case 9:
					state=STATE_FLASH;
 488:	10 93 e1 02 	sts	0x02E1, r17
 48c:	00 93 e0 02 	sts	0x02E0, r16
					break;
 490:	04 c0       	rjmp	.+8      	; 0x49a <main+0x11e>
				case 8:
					state=STATE_OFF;
 492:	10 92 e1 02 	sts	0x02E1, r1
 496:	10 92 e0 02 	sts	0x02E0, r1
					break;
				default:
					break;
			}
		}
		while(state==STATE_ROTATE){
 49a:	20 91 e0 02 	lds	r18, 0x02E0
 49e:	30 91 e1 02 	lds	r19, 0x02E1
 4a2:	22 30       	cpi	r18, 0x02	; 2
 4a4:	31 05       	cpc	r19, r1
 4a6:	29 f3       	breq	.-54     	; 0x472 <main+0xf6>
 4a8:	bf cf       	rjmp	.-130    	; 0x428 <main+0xac>

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
