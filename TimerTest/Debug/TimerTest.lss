
TimerTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800200  00000282  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008002d8  008002d8  000003ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000277  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014f  00000000  00000000  000006cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020f  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018e  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022f  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000e3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e8       	ldi	r30, 0x82	; 130
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 3d       	cpi	r26, 0xD8	; 216
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 ed       	ldi	r26, 0xD8	; 216
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 3d       	cpi	r26, 0xDA	; 218
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	66 d0       	rcall	.+204    	; 0x1ec <main>
 120:	ae c0       	rjmp	.+348    	; 0x27e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <pinMode>:
int digitalRead(int pNo){
	struct pinMap n = map[pNo];
	volatile uint8_t * address = (volatile uint8_t *) n.addr;
	int mask = (1<<n.bit);
	return (!!(address[0] &= mask));
}
 124:	86 33       	cpi	r24, 0x36	; 54
 126:	91 05       	cpc	r25, r1
 128:	b0 f5       	brcc	.+108    	; 0x196 <pinMode+0x72>
 12a:	dc 01       	movw	r26, r24
 12c:	aa 0f       	add	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	aa 0f       	add	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	a0 50       	subi	r26, 0x00	; 0
 136:	be 4f       	sbci	r27, 0xFE	; 254
 138:	ed 91       	ld	r30, X+
 13a:	fc 91       	ld	r31, X
 13c:	11 97       	sbiw	r26, 0x01	; 1
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	12 96       	adiw	r26, 0x02	; 2
 144:	0c 90       	ld	r0, X
 146:	02 c0       	rjmp	.+4      	; 0x14c <pinMode+0x28>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <pinMode+0x24>
 150:	61 30       	cpi	r22, 0x01	; 1
 152:	71 05       	cpc	r23, r1
 154:	79 f0       	breq	.+30     	; 0x174 <pinMode+0x50>
 156:	62 30       	cpi	r22, 0x02	; 2
 158:	71 05       	cpc	r23, r1
 15a:	91 f0       	breq	.+36     	; 0x180 <pinMode+0x5c>
 15c:	67 2b       	or	r22, r23
 15e:	f1 f4       	brne	.+60     	; 0x19c <pinMode+0x78>
 160:	91 81       	ldd	r25, Z+1	; 0x01
 162:	80 95       	com	r24
 164:	98 23       	and	r25, r24
 166:	91 83       	std	Z+1, r25	; 0x01
 168:	92 81       	ldd	r25, Z+2	; 0x02
 16a:	89 23       	and	r24, r25
 16c:	82 83       	std	Z+2, r24	; 0x02
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret
 174:	91 81       	ldd	r25, Z+1	; 0x01
 176:	89 2b       	or	r24, r25
 178:	81 83       	std	Z+1, r24	; 0x01
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	08 95       	ret
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	28 2f       	mov	r18, r24
 184:	20 95       	com	r18
 186:	92 23       	and	r25, r18
 188:	91 83       	std	Z+1, r25	; 0x01
 18a:	92 81       	ldd	r25, Z+2	; 0x02
 18c:	89 2b       	or	r24, r25
 18e:	82 83       	std	Z+2, r24	; 0x02
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	08 95       	ret
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	9f ef       	ldi	r25, 0xFF	; 255
 19a:	08 95       	ret
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	08 95       	ret

000001a2 <digitalWrite>:

void digitalWrite(int pNo, int value){
	struct pinMap n = map[pNo];
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	fc 01       	movw	r30, r24
 1ac:	e0 50       	subi	r30, 0x00	; 0
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
	volatile uint8_t * address = (volatile uint8_t *) n.addr;
 1b0:	a0 81       	ld	r26, Z
 1b2:	b1 81       	ldd	r27, Z+1	; 0x01
	int mask = (1<<n.bit);
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 80       	ldd	r0, Z+2	; 0x02
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <digitalWrite+0x1e>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <digitalWrite+0x1a>
	if(value == HIGH)
 1c4:	61 30       	cpi	r22, 0x01	; 1
 1c6:	71 05       	cpc	r23, r1
 1c8:	39 f4       	brne	.+14     	; 0x1d8 <digitalWrite+0x36>
	address[2] |= mask;
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	9c 91       	ld	r25, X
 1ce:	12 97       	sbiw	r26, 0x02	; 2
 1d0:	89 2b       	or	r24, r25
 1d2:	12 96       	adiw	r26, 0x02	; 2
 1d4:	8c 93       	st	X, r24
 1d6:	08 95       	ret
	else if(value == LOW)
 1d8:	67 2b       	or	r22, r23
 1da:	39 f4       	brne	.+14     	; 0x1ea <digitalWrite+0x48>
	address[2] &= ~mask;
 1dc:	12 96       	adiw	r26, 0x02	; 2
 1de:	9c 91       	ld	r25, X
 1e0:	12 97       	sbiw	r26, 0x02	; 2
 1e2:	80 95       	com	r24
 1e4:	89 23       	and	r24, r25
 1e6:	12 96       	adiw	r26, 0x02	; 2
 1e8:	8c 93       	st	X, r24
 1ea:	08 95       	ret

000001ec <main>:
void digitalWrite(int pNo, int value);
int ledState;

int main(void){
	
	pinMode(13,OUTPUT);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	8d e0       	ldi	r24, 0x0D	; 13
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	97 df       	rcall	.-210    	; 0x124 <pinMode>
	ledState = HIGH;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	90 93 d9 02 	sts	0x02D9, r25
 1fe:	80 93 d8 02 	sts	0x02D8, r24
	digitalWrite(13,HIGH);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	8d e0       	ldi	r24, 0x0D	; 13
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	cb df       	rcall	.-106    	; 0x1a2 <digitalWrite>
	
	#ifndef PART_A
	#define PART_A
	OCR1A = 12500; //50 ms
 20c:	68 e8       	ldi	r22, 0x88	; 136
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	04 ed       	ldi	r16, 0xD4	; 212
 212:	10 e3       	ldi	r17, 0x30	; 48
 214:	db 01       	movw	r26, r22
 216:	11 96       	adiw	r26, 0x01	; 1
 218:	1c 93       	st	X, r17
 21a:	0e 93       	st	-X, r16
	TIMSK1 |= (1<<OCIE1A); //Enable Timer match interrupts
 21c:	ef e6       	ldi	r30, 0x6F	; 111
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	82 60       	ori	r24, 0x02	; 2
 224:	80 83       	st	Z, r24
	TCCR1A = 0;
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	ec 01       	movw	r28, r24
 22c:	18 82       	st	Y, r1
	TCCR1B = 3;//start timer
 22e:	a1 e8       	ldi	r26, 0x81	; 129
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	23 e0       	ldi	r18, 0x03	; 3
 234:	2c 93       	st	X, r18
	#endif
	
	#ifndef PART_B
	#define PART_B
	ICR1 = 50000;
 236:	26 e8       	ldi	r18, 0x86	; 134
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	40 e5       	ldi	r20, 0x50	; 80
 23c:	53 ec       	ldi	r21, 0xC3	; 195
 23e:	e9 01       	movw	r28, r18
 240:	59 83       	std	Y+1, r21	; 0x01
 242:	48 83       	st	Y, r20
	OCR1A = 12500;
 244:	eb 01       	movw	r28, r22
 246:	19 83       	std	Y+1, r17	; 0x01
 248:	08 83       	st	Y, r16
	TIMSK1 |= (1<<OCIE1A);
 24a:	60 81       	ld	r22, Z
 24c:	62 60       	ori	r22, 0x02	; 2
 24e:	60 83       	st	Z, r22
	TCCR1A = 0;
 250:	ec 01       	movw	r28, r24
 252:	18 82       	st	Y, r1
	TCCR1B = 27;//start timer
 254:	6b e1       	ldi	r22, 0x1B	; 27
 256:	6c 93       	st	X, r22
	#endif
	
	#ifndef PART_C
	#define PART_C
	ICR1 = 50000;
 258:	e9 01       	movw	r28, r18
 25a:	59 83       	std	Y+1, r21	; 0x01
 25c:	48 83       	st	Y, r20
	OCR1C = 18750;
 25e:	2e e3       	ldi	r18, 0x3E	; 62
 260:	39 e4       	ldi	r19, 0x49	; 73
 262:	30 93 8d 00 	sts	0x008D, r19
 266:	20 93 8c 00 	sts	0x008C, r18
	TIMSK1 |= (1<<OCIE1C);
 26a:	20 81       	ld	r18, Z
 26c:	28 60       	ori	r18, 0x08	; 8
 26e:	20 83       	st	Z, r18
	TCCR1A = 8;
 270:	28 e0       	ldi	r18, 0x08	; 8
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18
	TCCR1B = 19;//start timer
 276:	83 e1       	ldi	r24, 0x13	; 19
 278:	8c 93       	st	X, r24
	#endif
	
	PART_C
	
	sei();//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 27a:	78 94       	sei
 27c:	ff cf       	rjmp	.-2      	; 0x27c <main+0x90>

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
