
InterruptHandler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  000002bc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080023a  0080023a  0000038a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000273  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001af  00000000  00000000  00000675  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000240  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f8  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c4  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	a6 c0       	rjmp	.+332    	; 0x1b6 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec eb       	ldi	r30, 0xBC	; 188
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 33       	cpi	r26, 0x3A	; 58
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 33       	cpi	r26, 0x3C	; 60
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	36 d0       	rcall	.+108    	; 0x18c <main>
 120:	cb c0       	rjmp	.+406    	; 0x2b8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <serial_open>:
	return UDR0;
}

void serial_write(char c){
	loop_until_bit_is_set(UCSR0A, UDRE0);
	UDR0 = c;
 124:	dc 01       	movw	r26, r24
 126:	cb 01       	movw	r24, r22
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	aa 1f       	adc	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	aa 1f       	adc	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	9c 01       	movw	r18, r24
 13a:	ad 01       	movw	r20, r26
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	44 1f       	adc	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	44 1f       	adc	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	74 e2       	ldi	r23, 0x24	; 36
 150:	84 ef       	ldi	r24, 0xF4	; 244
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	73 d0       	rcall	.+230    	; 0x23c <__divmodsi4>
 156:	21 50       	subi	r18, 0x01	; 1
 158:	31 09       	sbc	r19, r1
 15a:	30 93 c5 00 	sts	0x00C5, r19
 15e:	20 93 c4 00 	sts	0x00C4, r18
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	80 93 c2 00 	sts	0x00C2, r24
 168:	88 e1       	ldi	r24, 0x18	; 24
 16a:	80 93 c1 00 	sts	0x00C1, r24
 16e:	08 95       	ret

00000170 <serial_print>:
}

void serial_print(char *str){
	if(transmit_ISR){
 170:	20 91 00 02 	lds	r18, 0x0200
 174:	22 23       	and	r18, r18
 176:	49 f0       	breq	.+18     	; 0x18a <serial_print+0x1a>
		pData = str;
 178:	90 93 3b 02 	sts	0x023B, r25
 17c:	80 93 3a 02 	sts	0x023A, r24
		UCSR0B |= (1<<UDRIE0);
 180:	e1 ec       	ldi	r30, 0xC1	; 193
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 62       	ori	r24, 0x20	; 32
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <main>:
volatile uint8_t transmit_ISR = 1;
static char *pData;

int main(void)
{
	sei();
 18c:	78 94       	sei
	serial_open(19200, 0);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	7b e4       	ldi	r23, 0x4B	; 75
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	c4 df       	rcall	.-120    	; 0x124 <serial_open>
	char *msg = "This is a long string. Fuckity Fuckity Fuck Fuck Fuck.\n";
    while(1)
    {
        serial_print(msg);
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	92 e0       	ldi	r25, 0x02	; 2
 1a0:	e7 df       	rcall	.-50     	; 0x170 <serial_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	83 ed       	ldi	r24, 0xD3	; 211
 1a6:	90 e3       	ldi	r25, 0x30	; 48
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x1c>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x26>
 1b2:	00 00       	nop
 1b4:	f3 cf       	rjmp	.-26     	; 0x19c <main+0x10>

000001b6 <__vector_26>:
		pData = str;
		UCSR0B |= (1<<UDRIE0);
	}
}

ISR (USART0_UDRE_vect){
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	0b b6       	in	r0, 0x3b	; 59
 1c2:	0f 92       	push	r0
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
	if(*pData == 0){
 1cc:	e0 91 3a 02 	lds	r30, 0x023A
 1d0:	f0 91 3b 02 	lds	r31, 0x023B
 1d4:	80 81       	ld	r24, Z
 1d6:	81 11       	cpse	r24, r1
 1d8:	09 c0       	rjmp	.+18     	; 0x1ec <__vector_26+0x36>
		transmit_ISR = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 00 02 	sts	0x0200, r24
		UCSR0B &= ~(1<<UDRIE0);
 1e0:	e1 ec       	ldi	r30, 0xC1	; 193
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	8f 7d       	andi	r24, 0xDF	; 223
 1e8:	80 83       	st	Z, r24
 1ea:	0e c0       	rjmp	.+28     	; 0x208 <__vector_26+0x52>
	}
	else{
		transmit_ISR=0;
 1ec:	10 92 00 02 	sts	0x0200, r1
		UDR0=*pData;
 1f0:	80 81       	ld	r24, Z
 1f2:	80 93 c6 00 	sts	0x00C6, r24
		*pData++;
 1f6:	80 91 3a 02 	lds	r24, 0x023A
 1fa:	90 91 3b 02 	lds	r25, 0x023B
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	90 93 3b 02 	sts	0x023B, r25
 204:	80 93 3a 02 	sts	0x023A, r24
	}
	if(*pData==0){
 208:	e0 91 3a 02 	lds	r30, 0x023A
 20c:	f0 91 3b 02 	lds	r31, 0x023B
 210:	80 81       	ld	r24, Z
 212:	81 11       	cpse	r24, r1
 214:	08 c0       	rjmp	.+16     	; 0x226 <__vector_26+0x70>
		transmit_ISR = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 00 02 	sts	0x0200, r24
		UCSR0B &= ~(1<<UDRIE0);
 21c:	e1 ec       	ldi	r30, 0xC1	; 193
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	8f 7d       	andi	r24, 0xDF	; 223
 224:	80 83       	st	Z, r24
	}
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0b be       	out	0x3b, r0	; 59
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__divmodsi4>:
 23c:	05 2e       	mov	r0, r21
 23e:	97 fb       	bst	r25, 7
 240:	16 f4       	brtc	.+4      	; 0x246 <__divmodsi4+0xa>
 242:	00 94       	com	r0
 244:	0f d0       	rcall	.+30     	; 0x264 <__negsi2>
 246:	57 fd       	sbrc	r21, 7
 248:	05 d0       	rcall	.+10     	; 0x254 <__divmodsi4_neg2>
 24a:	14 d0       	rcall	.+40     	; 0x274 <__udivmodsi4>
 24c:	07 fc       	sbrc	r0, 7
 24e:	02 d0       	rcall	.+4      	; 0x254 <__divmodsi4_neg2>
 250:	46 f4       	brtc	.+16     	; 0x262 <__divmodsi4_exit>
 252:	08 c0       	rjmp	.+16     	; 0x264 <__negsi2>

00000254 <__divmodsi4_neg2>:
 254:	50 95       	com	r21
 256:	40 95       	com	r20
 258:	30 95       	com	r19
 25a:	21 95       	neg	r18
 25c:	3f 4f       	sbci	r19, 0xFF	; 255
 25e:	4f 4f       	sbci	r20, 0xFF	; 255
 260:	5f 4f       	sbci	r21, 0xFF	; 255

00000262 <__divmodsi4_exit>:
 262:	08 95       	ret

00000264 <__negsi2>:
 264:	90 95       	com	r25
 266:	80 95       	com	r24
 268:	70 95       	com	r23
 26a:	61 95       	neg	r22
 26c:	7f 4f       	sbci	r23, 0xFF	; 255
 26e:	8f 4f       	sbci	r24, 0xFF	; 255
 270:	9f 4f       	sbci	r25, 0xFF	; 255
 272:	08 95       	ret

00000274 <__udivmodsi4>:
 274:	a1 e2       	ldi	r26, 0x21	; 33
 276:	1a 2e       	mov	r1, r26
 278:	aa 1b       	sub	r26, r26
 27a:	bb 1b       	sub	r27, r27
 27c:	fd 01       	movw	r30, r26
 27e:	0d c0       	rjmp	.+26     	; 0x29a <__udivmodsi4_ep>

00000280 <__udivmodsi4_loop>:
 280:	aa 1f       	adc	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	ee 1f       	adc	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	a2 17       	cp	r26, r18
 28a:	b3 07       	cpc	r27, r19
 28c:	e4 07       	cpc	r30, r20
 28e:	f5 07       	cpc	r31, r21
 290:	20 f0       	brcs	.+8      	; 0x29a <__udivmodsi4_ep>
 292:	a2 1b       	sub	r26, r18
 294:	b3 0b       	sbc	r27, r19
 296:	e4 0b       	sbc	r30, r20
 298:	f5 0b       	sbc	r31, r21

0000029a <__udivmodsi4_ep>:
 29a:	66 1f       	adc	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	88 1f       	adc	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	1a 94       	dec	r1
 2a4:	69 f7       	brne	.-38     	; 0x280 <__udivmodsi4_loop>
 2a6:	60 95       	com	r22
 2a8:	70 95       	com	r23
 2aa:	80 95       	com	r24
 2ac:	90 95       	com	r25
 2ae:	9b 01       	movw	r18, r22
 2b0:	ac 01       	movw	r20, r24
 2b2:	bd 01       	movw	r22, r26
 2b4:	cf 01       	movw	r24, r30
 2b6:	08 95       	ret

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
