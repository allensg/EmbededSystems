
Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800200  00000320  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008002d8  008002d8  0000048c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000484  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023c  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000376  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00000f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023f  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000041c  00000000  00000000  0000126f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000168b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	ad c0       	rjmp	.+346    	; 0x180 <__vector_9>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e2       	ldi	r30, 0x20	; 32
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 3d       	cpi	r26, 0xD8	; 216
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 ed       	ldi	r26, 0xD8	; 216
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 3d       	cpi	r26, 0xDA	; 218
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	86 d0       	rcall	.+268    	; 0x22c <main>
 120:	fd c0       	rjmp	.+506    	; 0x31c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <serial_open>:
	}
	for(int j=0;j<20;j++){
		serial_write(digits[i]+0x30);
	}
	serial_write('\n');
}
 124:	dc 01       	movw	r26, r24
 126:	cb 01       	movw	r24, r22
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	aa 1f       	adc	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	aa 1f       	adc	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	9c 01       	movw	r18, r24
 13a:	ad 01       	movw	r20, r26
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	44 1f       	adc	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	44 1f       	adc	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	74 e2       	ldi	r23, 0x24	; 36
 150:	84 ef       	ldi	r24, 0xF4	; 244
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	a5 d0       	rcall	.+330    	; 0x2a0 <__divmodsi4>
 156:	21 50       	subi	r18, 0x01	; 1
 158:	31 09       	sbc	r19, r1
 15a:	30 93 c5 00 	sts	0x00C5, r19
 15e:	20 93 c4 00 	sts	0x00C4, r18
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	80 93 c2 00 	sts	0x00C2, r24
 168:	88 e1       	ldi	r24, 0x18	; 24
 16a:	80 93 c1 00 	sts	0x00C1, r24
 16e:	08 95       	ret

00000170 <serial_write>:
 170:	e0 ec       	ldi	r30, 0xC0	; 192
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	90 81       	ld	r25, Z
 176:	95 ff       	sbrs	r25, 5
 178:	fd cf       	rjmp	.-6      	; 0x174 <serial_write+0x4>
 17a:	80 93 c6 00 	sts	0x00C6, r24
 17e:	08 95       	ret

00000180 <__vector_9>:
void serial_write(char c){
	loop_until_bit_is_set(UCSR0A, UDRE0);
	UDR0 = c;
}

ISR (PCINT0_vect){
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
	interrupt_count++;
 18e:	80 91 d8 02 	lds	r24, 0x02D8
 192:	90 91 d9 02 	lds	r25, 0x02D9
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	90 93 d9 02 	sts	0x02D9, r25
 19c:	80 93 d8 02 	sts	0x02D8, r24
}
 1a0:	9f 91       	pop	r25
 1a2:	8f 91       	pop	r24
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <pinMode>:

int pinMode(int pNo, int type){
	if(pNo < 0 || pNo > 53)
 1ae:	86 33       	cpi	r24, 0x36	; 54
 1b0:	91 05       	cpc	r25, r1
 1b2:	b0 f5       	brcc	.+108    	; 0x220 <pinMode+0x72>
	return -1;
	struct pinMap n = map[pNo];
 1b4:	dc 01       	movw	r26, r24
 1b6:	aa 0f       	add	r26, r26
 1b8:	bb 1f       	adc	r27, r27
 1ba:	aa 0f       	add	r26, r26
 1bc:	bb 1f       	adc	r27, r27
 1be:	a0 50       	subi	r26, 0x00	; 0
 1c0:	be 4f       	sbci	r27, 0xFE	; 254
	volatile uint8_t * address = (volatile uint8_t *) n.addr;
 1c2:	ed 91       	ld	r30, X+
 1c4:	fc 91       	ld	r31, X
 1c6:	11 97       	sbiw	r26, 0x01	; 1
	int mask = (1<<n.bit);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	12 96       	adiw	r26, 0x02	; 2
 1ce:	0c 90       	ld	r0, X
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <pinMode+0x28>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <pinMode+0x24>

	switch(type){
 1da:	61 30       	cpi	r22, 0x01	; 1
 1dc:	71 05       	cpc	r23, r1
 1de:	79 f0       	breq	.+30     	; 0x1fe <pinMode+0x50>
 1e0:	62 30       	cpi	r22, 0x02	; 2
 1e2:	71 05       	cpc	r23, r1
 1e4:	91 f0       	breq	.+36     	; 0x20a <pinMode+0x5c>
 1e6:	67 2b       	or	r22, r23
 1e8:	f1 f4       	brne	.+60     	; 0x226 <pinMode+0x78>
		case 0x0:
		address[1] &= (~mask);
 1ea:	91 81       	ldd	r25, Z+1	; 0x01
 1ec:	80 95       	com	r24
 1ee:	98 23       	and	r25, r24
 1f0:	91 83       	std	Z+1, r25	; 0x01
		address[2] &= (~mask);
 1f2:	92 81       	ldd	r25, Z+2	; 0x02
 1f4:	89 23       	and	r24, r25
 1f6:	82 83       	std	Z+2, r24	; 0x02
		address[2] |= mask;
		break;
		default:
		break;
	}
	return 0;
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0

	switch(type){
		case 0x0:
		address[1] &= (~mask);
		address[2] &= (~mask);
		break;
 1fc:	08 95       	ret
		case 0x1:
		address[1] |= mask;
 1fe:	91 81       	ldd	r25, Z+1	; 0x01
 200:	89 2b       	or	r24, r25
 202:	81 83       	std	Z+1, r24	; 0x01
		address[2] |= mask;
		break;
		default:
		break;
	}
	return 0;
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
		address[1] &= (~mask);
		address[2] &= (~mask);
		break;
		case 0x1:
		address[1] |= mask;
		break;
 208:	08 95       	ret
		case 0x2:
		address[1] &= (~mask);
 20a:	91 81       	ldd	r25, Z+1	; 0x01
 20c:	28 2f       	mov	r18, r24
 20e:	20 95       	com	r18
 210:	92 23       	and	r25, r18
 212:	91 83       	std	Z+1, r25	; 0x01
		address[2] |= mask;
 214:	92 81       	ldd	r25, Z+2	; 0x02
 216:	89 2b       	or	r24, r25
 218:	82 83       	std	Z+2, r24	; 0x02
		break;
		default:
		break;
	}
	return 0;
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
		address[1] |= mask;
		break;
		case 0x2:
		address[1] &= (~mask);
		address[2] |= mask;
		break;
 21e:	08 95       	ret
	interrupt_count++;
}

int pinMode(int pNo, int type){
	if(pNo < 0 || pNo > 53)
	return -1;
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	9f ef       	ldi	r25, 0xFF	; 255
 224:	08 95       	ret
		address[2] |= mask;
		break;
		default:
		break;
	}
	return 0;
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
}
 22a:	08 95       	ret

0000022c <main>:
void parseInterruptCount(int count);

volatile int interrupt_count = 0;

int main(void){
	pinMode(13,OUTPUT);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	8d e0       	ldi	r24, 0x0D	; 13
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	bc df       	rcall	.-136    	; 0x1ae <pinMode>
	pinMode(53,INPUT_PULLUP);
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	85 e3       	ldi	r24, 0x35	; 53
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	b7 df       	rcall	.-146    	; 0x1ae <pinMode>
	serial_open(19200, 0);
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	7b e4       	ldi	r23, 0x4B	; 75
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	6b df       	rcall	.-298    	; 0x124 <serial_open>
	int count;
	
	PCICR |= (1<<PCIE0); //Enable PCI0 in PC Control Register
 24e:	e8 e6       	ldi	r30, 0x68	; 104
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	81 60       	ori	r24, 0x01	; 1
 256:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT0); //Enable PC Mask 0
 258:	eb e6       	ldi	r30, 0x6B	; 107
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
	sei();
 262:	78 94       	sei
	
while(1)
    {
        if(interrupt_count){
 264:	80 91 d8 02 	lds	r24, 0x02D8
 268:	90 91 d9 02 	lds	r25, 0x02D9
 26c:	89 2b       	or	r24, r25
 26e:	d1 f3       	breq	.-12     	; 0x264 <main+0x38>
 270:	82 e3       	ldi	r24, 0x32	; 50
 272:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	ef e9       	ldi	r30, 0x9F	; 159
 276:	ff e0       	ldi	r31, 0x0F	; 15
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <main+0x4c>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x52>
 27e:	00 00       	nop
 280:	01 97       	sbiw	r24, 0x01	; 1
	        count = 50;
	        while(count) {
 282:	00 97       	sbiw	r24, 0x00	; 0
 284:	b9 f7       	brne	.-18     	; 0x274 <main+0x48>
				_delay_ms(1);
		        count--;
	        }
	        serial_write(interrupt_count+48);
 286:	80 91 d8 02 	lds	r24, 0x02D8
 28a:	90 91 d9 02 	lds	r25, 0x02D9
 28e:	80 5d       	subi	r24, 0xD0	; 208
 290:	6f df       	rcall	.-290    	; 0x170 <serial_write>
			serial_write('\n');
 292:	8a e0       	ldi	r24, 0x0A	; 10
 294:	6d df       	rcall	.-294    	; 0x170 <serial_write>
	        interrupt_count = 0;
 296:	10 92 d9 02 	sts	0x02D9, r1
 29a:	10 92 d8 02 	sts	0x02D8, r1
 29e:	e2 cf       	rjmp	.-60     	; 0x264 <main+0x38>

000002a0 <__divmodsi4>:
 2a0:	05 2e       	mov	r0, r21
 2a2:	97 fb       	bst	r25, 7
 2a4:	16 f4       	brtc	.+4      	; 0x2aa <__divmodsi4+0xa>
 2a6:	00 94       	com	r0
 2a8:	0f d0       	rcall	.+30     	; 0x2c8 <__negsi2>
 2aa:	57 fd       	sbrc	r21, 7
 2ac:	05 d0       	rcall	.+10     	; 0x2b8 <__divmodsi4_neg2>
 2ae:	14 d0       	rcall	.+40     	; 0x2d8 <__udivmodsi4>
 2b0:	07 fc       	sbrc	r0, 7
 2b2:	02 d0       	rcall	.+4      	; 0x2b8 <__divmodsi4_neg2>
 2b4:	46 f4       	brtc	.+16     	; 0x2c6 <__divmodsi4_exit>
 2b6:	08 c0       	rjmp	.+16     	; 0x2c8 <__negsi2>

000002b8 <__divmodsi4_neg2>:
 2b8:	50 95       	com	r21
 2ba:	40 95       	com	r20
 2bc:	30 95       	com	r19
 2be:	21 95       	neg	r18
 2c0:	3f 4f       	sbci	r19, 0xFF	; 255
 2c2:	4f 4f       	sbci	r20, 0xFF	; 255
 2c4:	5f 4f       	sbci	r21, 0xFF	; 255

000002c6 <__divmodsi4_exit>:
 2c6:	08 95       	ret

000002c8 <__negsi2>:
 2c8:	90 95       	com	r25
 2ca:	80 95       	com	r24
 2cc:	70 95       	com	r23
 2ce:	61 95       	neg	r22
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255
 2d2:	8f 4f       	sbci	r24, 0xFF	; 255
 2d4:	9f 4f       	sbci	r25, 0xFF	; 255
 2d6:	08 95       	ret

000002d8 <__udivmodsi4>:
 2d8:	a1 e2       	ldi	r26, 0x21	; 33
 2da:	1a 2e       	mov	r1, r26
 2dc:	aa 1b       	sub	r26, r26
 2de:	bb 1b       	sub	r27, r27
 2e0:	fd 01       	movw	r30, r26
 2e2:	0d c0       	rjmp	.+26     	; 0x2fe <__udivmodsi4_ep>

000002e4 <__udivmodsi4_loop>:
 2e4:	aa 1f       	adc	r26, r26
 2e6:	bb 1f       	adc	r27, r27
 2e8:	ee 1f       	adc	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	a2 17       	cp	r26, r18
 2ee:	b3 07       	cpc	r27, r19
 2f0:	e4 07       	cpc	r30, r20
 2f2:	f5 07       	cpc	r31, r21
 2f4:	20 f0       	brcs	.+8      	; 0x2fe <__udivmodsi4_ep>
 2f6:	a2 1b       	sub	r26, r18
 2f8:	b3 0b       	sbc	r27, r19
 2fa:	e4 0b       	sbc	r30, r20
 2fc:	f5 0b       	sbc	r31, r21

000002fe <__udivmodsi4_ep>:
 2fe:	66 1f       	adc	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	88 1f       	adc	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	1a 94       	dec	r1
 308:	69 f7       	brne	.-38     	; 0x2e4 <__udivmodsi4_loop>
 30a:	60 95       	com	r22
 30c:	70 95       	com	r23
 30e:	80 95       	com	r24
 310:	90 95       	com	r25
 312:	9b 01       	movw	r18, r22
 314:	ac 01       	movw	r20, r24
 316:	bd 01       	movw	r22, r26
 318:	cf 01       	movw	r24, r30
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
